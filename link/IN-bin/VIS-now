#!/bin/bash
SCRIPT_NAME="$(basename "$0")"
VERSION="0.1"

: ${NOW_DIR:=${HOME}/.now}
NOW_HEAD="${NOW_DIR}/HEAD"

log() {
  printf "now -- %s\n" "$*"
}

ensure_dir() {
  if [ ! -d "${NOW_DIR}" ]; then
    log making "${NOW_DIR}" directory
    mkdir -p "${NOW_DIR}"
  fi
}

test_allowed_name() {
  test "$1" != "HEAD"
}

assert_allowed_name() {
  if ! test_allowed_name "$1"; then
    log "$1" not allowed as project name
    exit 1
  fi
}

test_project_exists() {
  test_allowed_name "$1" && test -e "${NOW_DIR}/$1"
}

assert_project_exists() {
  if ! test_project_exists "$1"; then
    log project "$1" does not exist
    exit 1
  fi
}

ensure_make_project() {
  assert_allowed_name "$1"
  local proj_file="${NOW_DIR}/$1"
  if [ ! -e "${proj_file}" ]; then
    log making project $1 ${proj_file}
    touch "${proj_file}"
  else
    log project $1 already exists, not creating
  fi
}

switch_to_project() {
  assert_project_exists "$1"
  if [ ! -e "${NOW_DIR}/$1" ]; then
    log no project named \"$1\"
    exit 2
  fi
  ln -s -f "$1" "${NOW_HEAD}"
  log switched to project "$1"
}

write_entry() {
  local date_str="$( date -Iseconds )"
  local action=$1
  shift
  printf "%s %-5s -- %s\n" "${date_str}" "${action}" "$*" >> "${NOW_HEAD}"
}

show_status() {
  if [ "$1" == "" -o "$1" == "full" ]; then
    with_active_task _show_status
  elif [ "$1" == "noproj" ]; then
    with_active_task _show_noproj_status
  elif [ "$1" == "prompt" ]; then
    with_active_task _show_prompt_status
  else
    log unknown status type $1
    exit 1
  fi
}

_show_noproj_status() {
  if [ $# -eq 0 ]; then
    :
    # noop
  elif [ $# -eq 1 ]; then
    :
    # noop
  else
    printf "%s/%s\n" "$2" "$3"
  fi
}

_show_prompt_status() {
  if [ $# -eq 0 ]; then
    :
    # noop
  elif [ $# -eq 1 ]; then
    printf "%s\n" "$1"
  else
    printf "%s/%s/%s\n" "$1" "$2" "$3"
  fi
}

_show_status() {
  if [ $# -eq 0 ]; then
    # no active project
    log no currently active project
  elif [ $# -eq 1 ]; then
    log project: $1, no active task
  else
    log project: $1, task: $2 "($3 elapsed)"
  fi
}

cur_proj_name() {
  basename $( readlink -f "${NOW_HEAD}" )
}


with_active_task() {
  if [ -e "${NOW_HEAD}" ]; then
    local proj="$( cur_proj_name )"
    local last_line="$( tail -n1 "${NOW_HEAD}" )"
    local match="^([^[:space:]]+)[[:space:]]+([^[:space:]]+)[[:space:]]+--[[:space:]](.*)$"
    if [[ "${last_line}" =~ $match ]]; then
      local action=${BASH_REMATCH[2]}

      if [ "${action}" != "begin" ]; then
        "$1" "${proj}"
        return $?
      fi

      local time=${BASH_REMATCH[1]}
      local task=${BASH_REMATCH[3]}

      local start_epoch="$(date -d "${time}" +%s)"
      local now_epoch="$(date +%s)"

      local epoch_diff="$(( ${now_epoch} - ${start_epoch} ))"

      local days="$(( $(date -d "@${epoch_diff}" +%j) - 1 ))"

      local elapsed="$(date -u -d "@${epoch_diff}" +%T)"
      if [ "${days}" -gt 0 ]; then
        elapsed="${days}d${elapsed}"
      fi

      "$1" "${proj}" "${task}" "${elapsed}"
      return $?
    else
      "$1" "${proj}"
      return $?
    fi
  fi
  "$1"
}

_ensure_end_active_task() {
  if [ $# -gt 2 ]; then
    _end_task "$2" "$3"
  fi
}

ensure_end_active_task() {
  with_active_task _ensure_end_active_task
}

_end_task() {
  log stopped \"$1\" "($2)"
  write_entry end "$1"
}

_end_active_task() {
  if [ $# -lt 3 ]; then
    log no active task to stop
    exit 2
  fi
  _end_task "$2" "$3"
}

end_active_task() {
  with_active_task _end_active_task
}

start_task() {
  log starting "$@"
  write_entry begin "$@"
}

show_tail() {
  local proj
  if [ "$1" == "" ]; then
    proj=$( cur_proj_name )
  else
    proj=$1
  fi
  if [ ! -e "${NOW_DIR}/${proj}" ]; then
    log no project ${proj}
    return 1
  else
    log last 10 lines of ${proj}
    tail -n 10 "${NOW_DIR}/${proj}"
  fi
}

show_help() {
  echo "\
${SCRIPT_NAME} v${VERSION}. Usage:
    -t [PROJ]  -- tail the last few tasks in a project
    -s [OPTS]  -- current status, style is either 'full' or 'prompt'
    -f         -- finish the currently active task
    -h, -?     -- this help message
    @<PROJ> [<new task name>] -- switch to project, terminating
        current task and optionally start a new task
    @@<PROJ> [task] -- same as above, but create the project
        if it doesn't exist
    <new task name> -- start a new task in the current project

    With no arguments, displays status."
}

main() {
  ensure_dir
  while getopts ":tsfvh?" opt; do
    case "$opt" in
    h|\?)
      show_help
      exit 0
      ;;
    s)
      shift $((OPTIND-1))
      show_status "${1:-full}"
      exit 0
      ;;
    t)
      shift $((OPTIND-1))
      show_tail "$1"
      exit 0
      ;;
    f)
      end_active_task
      exit 0
      ;;
    *)
      ;;
    esac
  done

  if [ $# -lt 1 ]; then
    show_status
    exit 0
  fi

  if [[ "$1" == @@* ]]; then
    local proj="${1##@@}"
    shift
    ensure_end_active_task
    ensure_make_project "${proj}"
    switch_to_project "${proj}"
  elif [[ "$1" == @* ]]; then
    local proj="${1##@}"
    shift
    assert_project_exists "${proj}"
    ensure_end_active_task
    switch_to_project "${proj}"
  else
    ensure_end_active_task
  fi

  if [ $# -gt 0 ]; then
    start_task "$@"
  fi
}

main "$@"
