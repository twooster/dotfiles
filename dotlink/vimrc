" Modeline and Notes {
"   vim: set foldmarker={,} foldlevel=0 spell:
"
"   Originally by Robert Melton, modified heavily
" }

" Go Pathogen, go!
call pathogen#infect()

" Basics {
    set nocompatible    " explicitly get out of vi-compatible mode
    set noexrc          " don't use local version of .(g)vimrc, .exrc
    set background=dark " we plan to use a dark background
    let mapleader=","   " a sensible leader character
    syntax on           " syntax highlighting on
" }

" General {
"    set autochdir                  " always switch to the current file directory
    filetype plugin indent on       " load filetype plugins/indent settings
    set autoread                    " always load updated files
    set backspace=indent,eol,start  " make backspace a more flexible
    set encoding=utf-8              " good default
    set fileformats=unix,dos,mac    " support all three, in this order
    set hidden                      " you can change buffers without saving
    set iskeyword+=_,$,@            " none of these are word dividers
    set matchpairs=(:),{:},[:],<:>  " some sane matchpairs
    set noerrorbells                " don't make noise
    set title                       " show title
    set ttyfast                     " derp
    set whichwrap=b,s,~

    set wildmenu " turn on command line completion wild style
    " ignore these list file extensions
    set wildignore=*.dll,*.o,*.obj,*.bak,*.exe,*.pyc,
                    \*.jpg,*.gif,*.png,.git
    set wildmode=list:longest " turn on wild mode huge list

    " Thanks to Wincent's vimrc for this
    if has('persistent_undo')
      set undodir=~/.vim/tmp,.       " keep undo files out of the way
      set undofile                        " actually use undo files
    endif
" }

" Vim UI {
    colorscheme molokai
    set cursorline              " highlight current line
    set incsearch               " BUT do highlight as you type you
                                " search phrase
    set laststatus=2            " always show the status line
    set lazyredraw              " do not redraw while running macros
    set linespace=0             " don't insert any extra pixel lines
                                " betweens rows
    set list                    " we do what to show tabs, to ensure we get them
                                " out of my files
    set listchars=tab:▸\ ,eol:¬,extends:»,precedes:«,trail:•
    set matchtime=5             " how many tenths of a second to blink
                                " matching brackets for
    set nostartofline           " leave my cursor where it was
    set visualbell              " don't blink
    set number                  " turn on line numbers
    set numberwidth=4           " good up to 9999 lines
    set report=0                " tell us when anything is changed via :...
    set ruler                   " always show current positions along the bottom
    set scrolloff=5             " keep X lines (top/bottom) for scope
    set shortmess=aOstTI        " shortens messages to avoid
                                " 'press a key' prompt
    set showcmd                 " show the command being typed
    set showmatch               " show matching brackets
    set sidescrolloff=10        " keep X lines at the sides
    set hlsearch

    set statusline=
    set statusline+=%<\                       " cut at start
    set statusline+=%2*[%n%H%M%R%W]%*\        " flags and buf no
    set statusline+=%-40F\                    " path
    set statusline+=%=%1*%y%*%*\              " file type
    set statusline+=%10((%l,%c)%)\            " line and column
    set statusline+=%P                        " percentage of file
" }

" Text Formatting/Layout {
"    set completeopt= " don't use a pop up menu for completions
    set expandtab          " no real tabs please!
    set formatoptions+=r   " Automatically insert comment leader on return,
    set ignorecase         " case insensitive by default
    set infercase          " case inferred by default
    set nowrap             " do not wrap line
    set shiftround         " when at 3 spaces, and I hit > ... go to 4, not 5
    set shiftwidth=2       " auto-indent amount when using cindent,
    set smartcase          " if there are caps, go case-sensitive
    set smartindent        " Use slightly smarter indentation
    set softtabstop=2      " tab converted to X spaces
    set tabstop=8          " real tabs X spaces wide

    " Sets up past-80-column highlighting
    highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    match OverLength /\%81v.\+/

    " Turn on all python highlighting
    let python_highlight_all = 1
    let python_slow_sync = 1
" }

" Plugin Settings {
    let b:match_ignorecase = 1 " case is stupid
" }

" CommandT {
    let g:CommandTMaxFiles=20000
    let g:CommandTMaxHeight=14
    let g:CommandTMatchWindowReverse=1
    let g:CommandTCancelMap='<ESC>'
" }

" Mappings {
    " The 'sane searching' section
    nnoremap / /\v
    vnoremap / /\V%

    " The 'make moving around windows easy' section
    map <c-h> <c-w>h
    map <c-j> <c-w>j
    map <c-k> <c-w>k
    map <c-l> <c-w>l

    " The 'visual instead of logical lines' section
    nnoremap j gj
    nnoremap k gk

    " The 'make switching quote-types easy' section
    nmap <Leader>' mzcs"'`z
    nmap <Leader>" mzcs'"`z

    " The 'make tab switching easy' section
    noremap <c-tab> :tabnext<cr>
    noremap <C-S-tab> :tabprevious<CR>
    noremap <C-t> :tabnew<CR>
    nnoremap <C-t> :tabnew<CR>
    nnoremap <C-tab> :tabnext<CR>
    nnoremap <C-S-tab> :tabprevious<CR>

    " Delete current buffer, move to previous
    nmap <leader>d :bprevious<CR>:bdelete #<CR>

    " Highlighting debugging:
    " map <C-F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

    " The 'I hate esc' section
    imap jj <esc>

    " CommandT
    map <leader>T :CommandTFlush<CR>

    " Ruby 1.9 hash rocket helper
    vmap <leader>rh :s/\%V\v([^:]):(\w+)(\s*)\=\>\s?/\1\2:\3/gc<cr>
    nmap <leader>rh :%s/\v([^:]):(\w+)(\s*)\=\>\s?/\1\2:\3/gc<cr>

    " The 'tubular tabular helpers' section
    " Align leftmost equals
    nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
    " Align all equals
    nmap <Leader>a+ :Tabularize /=<CR>
    vmap <Leader>a+ :Tabularize /=<CR>
    " Align all commas
    nmap <Leader>a, :Tabularize /,\zs<CR>
    vmap <Leader>a, :Tabularize /,\zs<CR>
    " Align line after first colon
    nmap <Leader>a; :Tabularize /^[^:]*:\zs<CR>
    vmap <Leader>a; :Tabularize /^[^:]*:\zs<CR>
    " Align first colons
    nmap <Leader>a: :Tabularize /^[^:]*\zs:<CR>
    vmap <Leader>a: :Tabularize /^[^:]*\zs:<CR>

    " Sort lines inside current paragraph
    nmap <Leader>s mzvi}:sort<CR>`z
    " Sort selected lines
    vmap <Leader>s :sort<CR>

    " The 'Make splitting more like tmux' section
    nmap <Leader>\     :vsp<CR>
    nmap <Leader><Bar> :vsp<CR>
    nmap <Leader>-     :sp<CR>

    " The 'make Y behave like C and D" section
    nnoremap Y y$

    " Command mode readline mappings
    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>

    " clipper support
    nnoremap <leader>y :call system('nc localhost 8399', @0)<CR>
" }

" Autocommands {
    au FileType ruby       setlocal tabstop=2 softtabstop=2 shiftwidth=2
    au FileType python     setlocal tabstop=8 softtabstop=4 shiftwidth=4
    au FileType javascript setlocal tabstop=2 softtabstop=2 shiftwidth=2
    au FileType css        setlocal tabstop=2 softtabstop=2 shiftwidth=2
    au FileType gitcommit  setlocal textwidth=70 fo+=t

    " Remove all trailing whitespace on save
    au BufWritePre * :%s/\s\+$//e

    " disable paste mode on leaving insert mode (thanks @wincent)
    au InsertLeave * set nopaste
" }

" GUI Settings {
if has("gui_running")
    " Basics {
        set columns=120
        set guioptions=ce
        "              ||
        "              |+-- use simple dialogs rather than pop-ups
        "              +  use GUI tabs, not console style tabs
        set mousehide " hide the mouse cursor when typing
        set transp=4 " a little bit of transparency for macvim
    " }
endif
" }

