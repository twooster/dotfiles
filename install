#!/usr/bin/env bash

set -eo pipefail
shopt -s nullglob

SCRIPT_DIR="$( cd "$( dirname -- "${BASH_SOURCE[0]}" )" && pwd -P )"
PACKAGE_DIR="${SCRIPT_DIR}/pkg"
TARGET_DIR="$HOME"
STRATEGY_FILE=".dotfiles"

if [[ "$( uname )" = "Darwin" ]] ; then
    LINK_FLAGS=-hs
else
    LINK_FLAGS=-ns
fi

MODE=Install
VERBOSE=
DRY_RUN=

if [[ -t 1 ]] ; then
    RESET="\e[0m"
    DGRAY="\e[90m"
    GRAY="\e[37m"
    GREEN="\e[32m"
    RED="\e[31m"
    BLUE="\e[34m"
    YELLOW="\e[33m"
else
    RESET=""
    DGRAY=""
    GRAY=""
    GREEN=""
    RED=""
    BLUE=""
    YELLOW=""
fi

cmd() {
    printf "${BLUE}[info]  ${RESET}> %s\n" "$*"
    if [[ -z "$DRY_RUN" ]] ; then
        "$@"
    fi
}

warn() {
    printf "${YELLOW}[warn]  ${RESET}%s\n" "$*" >&2
}

info() {
    printf "${BLUE}[info]  ${RESET}%s\n" "$*"
}

debug() {
    if [[ -n "$VERBOSE" ]] ; then
        printf "${DGRAY}[debug] ${RESET}%s\n" "$*"
    fi
}

fatal() {
    printf "${RED}[fatal] ${RESET}%s\n" "$*" >&2
    exit 1
}

link_dir() {
    local source="$1"
    local target="$2"

    if [[ ! -L "$source" ]] && [[ -d "$source" ]] ; then
      local strategy

      if [[ -e "${source}/${STRATEGY_FILE}" ]] ; then
          strategy="$( cat "${source}/${STRATEGY_FILE}" )"
      fi

      if [[ "$strategy" = "link" ]] ; then
          link_file "$source" "$target"
          return 0
      fi

      if [[ "$MODE" == Install ]] ; then
        if [[ -e "$target" ]] ; then
            if [[ ! -d "$target" ]] ; then
                fatal "Target folder ${target} (for ${source}) exists but is not a directory!"
            fi
        else
            debug "Target directory $target missing"
            cmd mkdir -p "$target" || fatal "Could not create directory ${target}"
        fi
      else
        if [[ ! -d "$target" ]] ; then
          debug "Skipping uninstall of missing $target directory"
          return 0
        fi
      fi
    fi

    local src
    for src in "$source"/* "$source"/.* ; do
        local name="${src##*/}"
        # Skip . prefixed files
        if [[ "$name" == .* ]] ; then
            continue
        fi
        if [[ "$name" == _* ]] ; then
            name="${name#_}"
        fi
        local target="$2/${name}"

        if [[ -L "$src" ]] || [[ ! -d "$src" ]] ; then
            link_file "$src" "$target"
        else
            link_dir "$src" "$target"
        fi
    done
}

backup_rename() {
    local src="$1"

    local i=0
    local target

    while : ; do
        target="${src}~${i}"
        if [[ ! -e "$target" ]] ; then
          break
        fi
        let i=i+1
    done
    info "Backup existing ${src} to ${target}"
    cmd mv -n "$src" "$target" || \
      warn "Backup failed"
}

link_file() {
    local source="$1"
    local target="$2"

    if [[ "$MODE" == Install ]] ; then
        # Note we have to test for symlink in case the symlink is dead
        if [[ -L "$target" ]]; then
            # Symbolic link, so...
            local rl=$( readlink "$target" )
            case "$rl" in
              "$source")
                debug "Already installed: ${target}"
                return
                ;;
              "$SCRIPT_DIR"*)
                warn "Removing mismatch: ${target} -> ${rl}"
                cmd rm -- "$target"
                ;;
              *)
                backup_rename "$target"
                ;;
            esac
        elif [[ -e "$target" ]]; then
            backup_rename "$target"
        fi

        if [[ ! -e "$target" ]]; then
            debug "Linking ${source} -> ${target}"
            cmd ln "$LINK_FLAGS" "$source" "$target" || \
              fatal "Link creation failed: ${source} -> ${target}"
        else
            fatal "Target exists: ${source} -> ${target}"
        fi
    else
        if [[ -L "$target" ]] ; then
            local rl=$( readlink "$target" )
            if [[ "$rl" == "$source" ]] ; then
                debug "Removing ${target} -> ${source}"
                cmd rm -- "$target" ||
                  fatal "Unable to remove $target"
            else
                debug "$target symlink exists, but mismatches: $rl"
            fi
        elif [[ -e "$target" ]] ; then
            debug "$target exists, but is not symlink"
        else
            debug "$target missing"
        fi
    fi
}

normpath() {
  cd -- "$1" && pwd
}

link_packages() {
  local targetdir="$1"
  shift

  for pkg in "$@" ; do
    if pkg=$( normpath "$pkg" ) ; then
      info "${MODE} package $pkg to $TARGET_DIR"
      link_dir "$pkg" "$targetdir"
    else
      warn "Could not normalize path $pkg -- does this exist?"
    fi
  done
}

while getopts "dvut:" opt ; do
    case "$opt" in
        d)
          DRY_RUN=1
          warn "Running in dry-run mode"
          ;;
        v) VERBOSE=1 ;;
        t) TARGET_DIR="$OPTARG" ;;
        u) MODE=Uninstall ;;
        *) fatal "Unknown option chosen ${opt}" ;;
    esac
done

shift $((OPTIND -1))
if [[ $# -gt 0 ]] ; then
  PACKAGES=("$@")
else
  PACKAGES=("$PACKAGE_DIR"/*)
fi

# info "Updating submodules"
# cmd git submodule update --init

info "Installing dotfiles"
link_packages "$TARGET_DIR" "${PACKAGES[@]}"
info "Done"
